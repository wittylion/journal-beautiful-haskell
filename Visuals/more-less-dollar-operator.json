[
    {
        "title": "Operators <$, <$>, $>",
        "icon": "transform",
        "category": "Operators",
        "tabs": [
            {
                "content": [
                    {
                        "type": "visual-explanation",
                        "data": {
                            "actions": [
                                [
                                    "show_overlay",
                                    "Operators <$, <$>, $>\n\nChange Wrapped Data"
                                ],
                                [
                                    [
                                        "put_content",
                                        [
                                            "main = print candiesToBuy",
                                            "  where",
                                            "    friends = 2",
                                            "    candiesPerFriend = 2",
                                            "    candiesToBuy = friends * candiesPerFriend"
                                        ]
                                    ],
                                    [
                                        "show_explanation",
                                        "Changing any variable is easy:\r\na = 2\r\nb = 2\r\na2 = a * b\r\n\r\nBut what if your variable is wrapped into one of these data types like:\r\na = Just 2",
                                        "Let's start!"
                                    ]
                                ],
                                [
                                    [
                                        "put_line",
                                        "We need 4 Snickerses\n"
                                    ],
                                    [
                                        "put_content",
                                        [
                                            "main = print candiesToBuy",
                                            "  where",
                                            "    friends = Just 2",
                                            "    candiesPerFriend = 3",
                                            "    candiesToBuy = (* candiesPerFriend) <$> friends"
                                        ]
                                    ],
                                    [
                                        "show_explanation",
                                        "Unfortunately you cannot write like this:\r\na = Just 2\r\nb = 2\r\na2 = a * b\r\n\r\nBut you can:\r\na2 = (*b) <$> a",
                                        "Can we multiply Just 2 friends?"
                                    ]
                                ],
                                [
                                    [
                                        "put_line",
                                        "(<$>) :: Functor f => (a -> b) -> f a -> f b\n"
                                    ],
                                    [
                                        "show_explanation",
                                        "You know what is Functor, right?\r\n\r\nIs a word that wraps the primitives, like this:\r\ndata Maybe a  =  Nothing | Just a\r\ndata Vector2D = V2D Int Int\r\n\r\nAnd operator <$> allows to do something with your primitive, ignoring a wrapper like Just or V2D.",
                                        "Is that a Functor?"
                                    ]
                                ],
                                [
                                    [
                                        "put_content",
                                        [
                                            "main = print candiesToBuy",
                                            "  where",
                                            "    friends = 2",
                                            "    total = Just friends",
                                            "    candiesPerFriend = 3",
                                            "    candiesToBuy = (friends * candiesPerFriend) <$ total"
                                        ]
                                    ],
                                    [
                                        "show_explanation",
                                        "But what if you know how to compute your value and you don't want to apply function with <$> operator? Just point a value that you want to apply to your Functor with <$ operator.",
                                        "Just change it!"
                                    ]
                                ],
                                [
                                    [
                                        "put_line",
                                        "(<$) :: Functor f => a -> f b -> f a\n"
                                    ],
                                    [
                                        "put_content",
                                        [
                                            "import Data.Functor",
                                            "",
                                            "main = print candiesToBuy",
                                            "  where",
                                            "    friends = 2",
                                            "    total = Just friends",
                                            "    candiesPerFriend = 3",
                                            "    candiesToBuy = total $> (friends * candiesPerFriend)"
                                        ]
                                    ],
                                    [
                                        "show_explanation",
                                        "It would be easier to read code like: to my functor Vector apply value 1. And in this case we have to use the opposite operator $>. But to use we have to import Data.Functor namespace.",
                                        "Can we do it prettier?"
                                    ]
                                ],
                                [
                                    [
                                        "put_line",
                                        "($>) :: Functor f => f a -> b -> f b\n"
                                    ],
                                    [
                                        "put_content",
                                        [
                                            "main =",
                                            "  hClose <$> openFile \"a.txt\" WriteMode"
                                        ]
                                    ],
                                    [
                                        "highlight_row",
                                        2
                                    ],
                                    [
                                        "show_explanation",
                                        "When you work with real world things, you have to operate with IO, that wraps meaningful things, like:\r\nIO Handle\r\nIO String\r\n\r\nSo to make some meaningful change just use \"dollars\" - <$>.",
                                        "Working with IO:"
                                    ]
                                ],
                                [
                                    "show_explanation",
                                    "Now you seem to know \"<$>\" operator.\n\nClick on the code to complete this lesson.",
                                    "Congratulations"
                                ],
                                [
                                    "show_overlay",
                                    "Now you are master of <$> operator."
                                ],
                                ["remove_highlighting"]
                            ]
                        }
                    }
                ]
            }
        ]
    }
]