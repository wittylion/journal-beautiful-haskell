[{"title":"Operators >> and >>=","icon":"waveSquare","category":"Monads","tabs":[{"icon":"waveSquare","content":[{"type":"visual-explanation","data":{"actions":[["show_overlay","Operators >> and >>="],["put_content",["main =","  putStrLn \"Enter your name:\"","  >> getLine ","  >>= \\name ->\n    return (\"Hello, \" ++ name ++ \"!\")","  >>= putStrLn"]],[["highlight_row",2],["show_explanation","Click on the code to put the message \"Enter your name\" to the console.","Mutate the world"]],["put_line","Enter your name:\n"],[["highlight_row",3],["show_explanation","executes mutations one by one. You can write:\n\nmain =\n  putStr \"1\" >> putStr \"2\" >> putStr \"3\"\n\nThat will be similar to:\n\nmain = do\n  putStr \"1\"\n  putStr \"2\"\n  putStr \"3\"\n\nAs you can see \"do\" operator automatically concatenates operations and returns one operation to the main variable.","Operator >>"]],["put_line","> John\n"],[["highlight_row",4],["show_explanation","This one is similar to the \">>\" but it takes the result of the previous execution. As you can see in this lambda we take the \"name\" parameter that was obtained by \"getLine\" operator.\n\nNote: \"return\" operator takes the constant and awares the world about this constant existence.","Operator >>="]],[["highlight_row",5],["show_explanation","What will be put to the console?","Check yourself"]],[["put_line","Hello, John!"],["remove_highlighting"],["show_explanation","Now you seem to know \">>\" and \">>=\" operators.\n\nClick on the code to complete this lesson.","Congratulations"]],["show_overlay","Now you are master of tree-like operators."]]}}]}]}]